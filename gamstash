#!/usr/bin/gjs

const GLib = imports.gi.GLib;
const Gtk = imports.gi.Gtk;
const Lang = imports.lang;
const Webkit = imports.gi.WebKit;
const Gio = imports.gi.Gio;

const Gamstash = new Lang.Class ({
    Name: 'Gamstash',

    // Create the application itself
    _init: function () {
        this.application = new Gtk.Application ();

        // Connect 'activate' and 'startup' signals to the callback functions
        this.application.connect('activate', Lang.bind(this, this._onActivate));
        this.application.connect('startup', Lang.bind(this, this._onStartup));
    },

    // Callback function for 'activate' signal presents windows when active
    _onActivate: function () {
        this._window.present ();
    },

    // Callback function for 'startup' signal builds the UI
    _onStartup: function () {
        this._buildUI ();

        this._configure_media_keys();
    },

    // Build the application's UI
    _buildUI: function () {

        // Create the application window
        this._window = new Gtk.ApplicationWindow  ({
            application: this.application,
            title: "Gamstash",
            default_height: 800,
            default_width: 1200,
            window_position: Gtk.WindowPosition.CENTER });

        this._window.maximize();

        this._header = new Gtk.HeaderBar({title: "Gamstash", show_close_button: true});
        this._window.set_titlebar(this._header);

        this._scroll = new Gtk.ScrolledWindow();
        this._window.add (this._scroll);

        // Create a webview to show the web app
        this._webView = new Webkit.WebView ();

        // Put the web app into the webview
        this._webView.load_uri ("http://jamstash.com/");

        // Put the webview into the window
        this._scroll.add (this._webView);

        // Show the window and all child widgets
        this._window.show_all();

    },

    _configure_media_keys: function() {

        this._conn = Gio.DBus.get_sync(Gio.BusType.SESSION, null);

        this._proxy = Gio.DBusProxy.new_sync(this._conn, Gio.DBusProxyFlags.NONE, null, "org.gnome.SettingsDaemon", "/org/gnome/SettingsDaemon/MediaKeys", "org.gnome.SettingsDaemon.MediaKeys", null);

        this._proxy.call_sync("GrabMediaPlayerKeys", new GLib.Variant("(su)", "WebMediaKeys", 0), Gio.DBusCallFlags.NONE, 1, null);

        this._proxy.connect("g-signal", this._control_keys(app));
    },

    _control_keys: function(app) {
        return function(proxy, sender, signal, parameters) {
            if (signal === "MediaPlayerKeyPressed") {
                var action = parameters.unpack()[1].unpack();
                if (action === "Play") {
                    app._webView.execute_script("if ($('.hover.PlayTrack')[0].attributes['style'].value === 'display: none;') { $('a.hover.PauseTrack')[0].click(); } else { $('a.hover.PlayTrack')[0].click(); }");
                } else if (action == "Previous") {
                    app._webView.execute_script("$('#PreviousTrack')[0].click()");
                } else if (action == "Next") {
                    app._webView.execute_script("$('#NextTrack')[0].click()");
                }
            }
        };
    },

});

// Run the application
let app = new Gamstash ();
app.application.run (ARGV);

